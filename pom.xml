<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>4.0.0-M3</version>
        <relativePath/>
    </parent>

    <groupId>fi.hsl.jore4</groupId>
    <artifactId>jore4-netex-export</artifactId>
    <packaging>jar</packaging>
    <version>1.0.0</version>
    <name>Jore4 NeTEx exporter</name>
    <description>Jore4 NeTEx exporter creates xml files according to Nordic NeTEx profile from Jore4 database data</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>24</java.version>

        <kotlin.code.style>official</kotlin.code.style>
        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>
        <kotlin.compiler.jvmTarget>${java.version}</kotlin.compiler.jvmTarget>

        <!-- Maven build plugins and their dependencies -->
        <maven-compiler-plugin.version>3.14.0</maven-compiler-plugin.version>
        <build-helper-plugin.version>3.6.0</build-helper-plugin.version>
        <build-properties-plugin.version>1.2.1</build-properties-plugin.version>
        <surefire-plugin.version>3.5.4</surefire-plugin.version>
        <failsafe-plugin.version>3.5.4</failsafe-plugin.version>
        <kotlin-junit.version>2.2.20</kotlin-junit.version>
        <ktlint-plugin.version>3.5.0</ktlint-plugin.version>

        <!-- Library versions -->
        <kotlin-logging-jvm.version>7.0.7</kotlin-logging-jvm.version>
        <mockk.version>1.14.6</mockk.version>
        <springmockk.version>4.0.2</springmockk.version>
        <jupiter.version>6.0.0</jupiter.version>
        <jackson.version>3.0.0</jackson.version>

        <!-- Other properties -->
        <start.class>fi.hsl.jore4.export.netex.NetexExportApplicationKt</start.class>
    </properties>

    <profiles>
        <profile>
            <id>prod</id>
            <properties>
                <build.profile.id>prod</build.profile.id>
                <build.property.file>profiles/${build.profile.id}/config.properties</build.property.file>
                <skip.jooq.generation>true</skip.jooq.generation>
            </properties>
            <build>
                <filters>
                    <filter>${build.property.file}</filter>
                </filters>
                <plugins>
                    <!-- Read properties files for build plugins. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <version>${build-properties-plugin.version}</version>

                        <configuration>
                            <files>
                                <file>${build.property.file}</file>
                            </files>
                            <properties/>
                        </configuration>

                        <executions>
                            <execution>
                                <id>read-config-properties</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>

        <profile>
            <id>dev</id>
            <properties>
                <build.profile.id>dev</build.profile.id>
                <build.property.file>profiles/${build.profile.id}/config.properties</build.property.file>
                <build.property.user-override.file>profiles/${build.profile.id}/config.${user.name}.properties</build.property.user-override.file>
                <skip.jooq.generation>true</skip.jooq.generation>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <filters>
                    <filter>${build.property.file}</filter>
                    <filter>${build.property.user-override.file}</filter>
                </filters>
                <plugins>
                    <!-- Read properties files for build plugins. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <version>${build-properties-plugin.version}</version>

                        <configuration>
                            <quiet>true</quiet>
                            <files>
                                <file>${build.property.file}</file>
                                <file>${build.property.user-override.file}</file>
                            </files>
                            <properties/>
                        </configuration>

                        <executions>
                            <execution>
                                <id>read-config-properties</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>

            <dependencies>
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-devtools</artifactId>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>

        <profile>
            <id>ci</id>
            <properties>
                <build.profile.id>ci</build.profile.id>
                <build.property.file>profiles/${build.profile.id}/config.properties</build.property.file>
                <skip.jooq.generation>false</skip.jooq.generation>
            </properties>
            <build>
                <filters>
                    <filter>${build.property.file}</filter>
                </filters>
                <plugins>
                    <!-- Read properties files for build plugins. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <version>${build-properties-plugin.version}</version>

                        <configuration>
                            <files>
                                <file>${build.property.file}</file>
                            </files>
                            <properties/>
                        </configuration>

                        <executions>
                            <execution>
                                <id>read-config-properties</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>

            <dependencies>
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-devtools</artifactId>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>
    </profiles>

    <build>
        <sourceDirectory>src/main/kotlin</sourceDirectory>
        <testSourceDirectory>src/test/kotlin</testSourceDirectory>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>${build-helper-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>target/generated-sources/</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <configuration>
                    <compilerPlugins>
                        <plugin>all-open</plugin>
                    </compilerPlugins>
                    <pluginOptions>
                        <option>all-open:annotation=org.springframework.scheduling.annotation.Async</option>
                        <option>all-open:annotation=org.springframework.transaction.annotation.Transactional</option>
                        <option>all-open:annotation=org.springframework.cache.annotation.Cacheable</option>
                        <option>all-open:annotation=org.springframework.stereotype.Component</option>
                    </pluginOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-noarg</artifactId>
                        <!-- version inherited from the Spring Boot parent POM -->
                        <version>${kotlin.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-allopen</artifactId>
                        <!-- version inherited from the Spring Boot parent POM -->
                        <version>${kotlin.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>${start.class}</mainClass>
                    <layout>JAR</layout>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire-plugin.version}</version>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${failsafe-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>com.github.gantsign.maven</groupId>
                <artifactId>ktlint-maven-plugin</artifactId>
                <version>${ktlint-plugin.version}</version>
                <executions>
                    <execution>
                        <id>check</id>
                        <configuration>
                            <sourceRoots>${project.build.sourceDirectory}/fi</sourceRoots>
                        </configuration>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <!-- version inherited from the Spring Boot parent POM -->
                <version>${jooq.version}</version>

                <executions>
                    <execution>
                        <id>generate-jore4-database-classes</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.jooq.generation}</skip>
                            <jdbc>
                                <driver>${jore4.db.driver}</driver>
                                <url>${jore4.db.url}</url>
                                <user>${jore4.db.username}</user>
                                <password>${jore4.db.password}</password>
                            </jdbc>
                            <generator>
                                <name>org.jooq.codegen.KotlinGenerator</name>
                                <database>
                                    <name>${jooq.generator.db.dialect}</name>
                                    <excludes>
                                        AUTH_SESSION.*
                                        | HDB_CATALOG.*
                                        | internal_utils.*
                                        | SKEYS
                                        | SVALS
                                        | EACH
                                        | PUBLIC.*
                                        | pg_catalog.*
                                        | information_schema.*
                                    </excludes>
                                    <excludeSql>
                                        <!-- Select all generated columns. They don't work nicely with jOOQ DAO UPDATE methods. -->
                                        SELECT table_schema || '\.' || table_name || '\.' || column_name AS fully_qualified_name
                                        FROM information_schema.columns
                                        WHERE is_generated = 'ALWAYS'
                                    </excludeSql>
                                    <includeTables>true</includeTables>
                                    <includeInvisibleColumns>false</includeInvisibleColumns>
                                    <includeExcludeColumns>true</includeExcludeColumns>
                                    <includeEmbeddables>false</includeEmbeddables>
                                    <includeRoutines>true</includeRoutines>
                                    <includePackages>false</includePackages>
                                    <includePackageRoutines>false</includePackageRoutines>
                                    <includePackageUDTs>false</includePackageUDTs>
                                    <includePackageConstants>false</includePackageConstants>
                                    <includeUDTs>false</includeUDTs>
                                    <includeDomains>false</includeDomains>
                                    <includeSequences>true</includeSequences>
                                    <includePrimaryKeys>true</includePrimaryKeys>
                                    <includeUniqueKeys>true</includeUniqueKeys>
                                    <includeForeignKeys>true</includeForeignKeys>
                                    <includeCheckConstraints>false</includeCheckConstraints>
                                    <includeSystemCheckConstraints>false</includeSystemCheckConstraints>
                                    <includeIndexes>false</includeIndexes>
                                    <includeSystemIndexes>false</includeSystemIndexes>
                                </database>
                                <generate>
                                    <records>false</records>
                                    <daos>true</daos>
                                    <springAnnotations>true</springAnnotations>
                                    <springDao>true</springDao>
                                    <kotlinNotNullPojoAttributes>true</kotlinNotNullPojoAttributes>
                                    <kotlinNotNullRecordAttributes>true</kotlinNotNullRecordAttributes>
                                    <kotlinNotNullInterfaceAttributes>true</kotlinNotNullInterfaceAttributes>
                                </generate>
                                <target>
                                    <packageName>fi.hsl.jore.jore4.jooq</packageName>
                                    <directory>${project.basedir}/target/generated-sources/jooq</directory>
                                </target>
                            </generator>
                        </configuration>
                    </execution>
                </executions>

                <dependencies>
                    <dependency>
                        <groupId>org.postgresql</groupId>
                        <artifactId>postgresql</artifactId>
                        <!-- version inherited from the Spring Boot parent POM -->
                        <version>${postgresql.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jooq</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test-junit5</artifactId>
            <version>${kotlin-junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-reflect</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
        <dependency>
            <groupId>tools.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>tools.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>tools.jackson.module</groupId>
            <artifactId>jackson-module-kotlin</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <!-- version inherited from the Spring Boot parent POM -->
            <version>${postgresql.version}</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

</project>
